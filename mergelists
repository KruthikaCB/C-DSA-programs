#include <stdio.h>
#include <stdlib.h>
struct node{
    int data;
    struct node* link;
};
typedef struct node node_t;
struct list{
    node_t* head;
};
typedef struct list list_t;
void init(list_t*);
void insert_order(list_t*,int);
void insert_tail(list_t*,int);
void merge(list_t*,list_t*,list_t*);
void display(list_t*);
void create_list(list_t*);
int main(){
    list_t l1,l2,l3;
    init(&l1);
    init(&l2);
    init(&l3);
    printf("creating list 1..\n");
    create_list(&l1);
    printf("displaying list 1...\n");
    display(&l1);
    printf("creating list 2..\n");
    create_list(&l2);
    printf("displaying list 2...\n");
    display(&l2);
    printf("merging two list..\n");
    merge(&l1,&l2,&l3);
    printf("displaying list merged...\n");
    display(&l3);
}
void init(list_t* l){
    l->head=NULL;
}
void insert_order(list_t* ptr_list,int x){
    node_t *pres,*temp,*prev;
    temp=(node_t*)malloc(sizeof(node_t));
    temp->data=x;
    temp->link=NULL;
    prev=NULL;
    pres=ptr_list->head;
    while((pres!=NULL)&&(pres->data<x)){
        prev=pres;
        pres=pres->link;
    }
    if(pres!=NULL){
        if(prev==NULL){
            temp->link=pres;
            ptr_list->head=temp;
        }
        else{
            temp->link=pres;
            prev->link=temp;
        }
    }
    else{
        //pres==null
        if(prev==NULL){
            ptr_list->head=temp;
        }
        else{
            prev->link=temp;
        }
    }
}
void insert_tail(list_t* ptr_list,int x){
    node_t* temp,*pres;
    temp=(node_t*)malloc(sizeof(node_t));
    temp->data=x;
    temp->link=NULL;
    if(ptr_list->head==NULL){
        ptr_list->head=temp;
        return;
    }
    pres=ptr_list->head;
    while(pres->link!=NULL){
        pres=pres->link;
    }
    pres->link=temp;
}
void merge(list_t* l1,list_t* l2,list_t* l3){
    node_t *p,*q;
    p=l1->head;
    q=l2->head;
    while((p!=NULL)&&(q!=NULL)){
        if(p->data<q->data){
            insert_tail(l3,p->data);
            p=p->link;
        }
        else{
            insert_tail(l3,q->data);
            q=q->link;
        }
    }
    if(p==NULL){
        while(q!=NULL){
            insert_tail(l3,q->data);
            q=q->link;
        }
    }
    else{
        while(p!=NULL){
            insert_tail(l3,p->data);
            p=p->link;
        }
    
}
}
void display(list_t* ptr_list){
    node_t* pres=ptr_list->head;
    if(pres==NULL){
        printf("list is empty\n");
    }
    while(pres!=NULL){
        printf("%d-> ",pres->data);
        pres=pres->link;
    }
}
void create_list(list_t* ptr_list){
    int x;
    while(1){
        printf("enter the element");
        scanf("%d",&x);
        if(x==0){
            break;
        }
        insert_order(ptr_list,x);
    }
}
